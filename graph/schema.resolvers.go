package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.42

import (
	"context"
	"time"

	"github.com/alexeavru/keks-events/common"
	"github.com/alexeavru/keks-events/graph/model"
)

// CreateEvent is the resolver for the createEvent field.
func (r *mutationResolver) CreateEvent(ctx context.Context, input model.NewEvent) (*model.Event, error) {
	event, err := r.EventsDB.Create(input.EventName, input.Description, input.DateStart.Format(time.RFC3339), input.DateEnd.Format(time.RFC3339))
	if err != nil {
		return nil, err
	}

	return &model.Event{
		ID:          event.ID,
		EventName:   event.EventName,
		Description: event.Description,
		DateStart:   input.DateStart,
		DateEnd:     input.DateEnd,
	}, nil
}

// Events is the resolver for the events field.
func (r *queryResolver) Events(ctx context.Context) ([]*model.Event, error) {
	eventsDB, err := r.EventsDB.FindAll()
	if err != nil {
		return nil, err
	}
	var eventsModel []*model.Event
	for _, event := range eventsDB {
		eventsModel = append(eventsModel, &model.Event{
			ID:          event.ID,
			EventName:   event.EventName,
			Description: event.Description,
			DateStart:   common.ParseTime(event.DateStart),
			DateEnd:     common.ParseTime(event.DateEnd),
		})
	}
	return eventsModel, nil
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
